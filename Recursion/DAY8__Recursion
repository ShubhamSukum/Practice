46. Permutations (2 videos) & 51. N queens (n queen is below)
Medium

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
Accepted
1.4M
Submissions
1.9M
Acceptance Rate
75.0%

ANSWER =>

class Solution {
public: /* OPTIMISED SOLUTION striver*/
    void lupy(int ind,vector<vector<int>>& ans,vector<int>& nums)
    {
        if(ind==nums.size()) 
        {
            ans.push_back(nums);
            return;
        }

        for(int i=ind;i<nums.size();i++)
        {
            swap(nums[ind],nums[i]);
            lupy(ind+1,ans,nums);
            swap(nums[ind],nums[i]);
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        lupy(0,ans,nums);   // 0 is ind here
        return ans;
    }
};

// not that optimised extra freq and ds

class Solution {
public:
    void lupy(vector<int>& freq,vector<vector<int>>& ans,vector<int>& ds,vector<int>& nums)
    {
        if(ds.size()==nums.size())
        {
            ans.push_back(ds);
            return;
        }

        for(int i=0;i<nums.size();i++)
        {
            if(!freq[i])
            {
                ds.push_back(nums[i]);
                freq[i]=1;
                lupy(freq,ans,ds,nums);
                freq[i]=0;
                ds.pop_back();      // he rahun gel hott
            }
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> ds,freq(nums.size(),0);
        // Recursive function
        lupy(freq,ans,ds,nums);

        return ans;
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

51. N-Queens
Hard

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9
Accepted
498.3K
Submissions
786.7K
Acceptance Rate
63.3%

ANSWER => 

// optimised one
class Solution {
  public:
    void solve(int col, vector < string > & board, vector < vector < string >> & ans, vector < int > & leftrow, vector < int > & upperDiagonal, vector < int > & lowerDiagonal, int n) {
      if (col == n) {
        ans.push_back(board);
        return;
      }
      for (int row = 0; row < n; row++) {
        if (leftrow[row] == 0 && lowerDiagonal[row + col] == 0 && upperDiagonal[n - 1 + col - row] == 0) {
          board[row][col] = 'Q';
          leftrow[row] = 1;
          lowerDiagonal[row + col] = 1;
          upperDiagonal[n - 1 + col - row] = 1;
          solve(col + 1, board, ans, leftrow, upperDiagonal, lowerDiagonal, n);
          board[row][col] = '.';
          leftrow[row] = 0;
          lowerDiagonal[row + col] = 0;
          upperDiagonal[n - 1 + col - row] = 0;
        }
      }
    }

 public:
   vector < vector < string >> solveNQueens(int n) {
     vector < vector < string >> ans;
     vector < string > board(n);
     string s(n, '.');
     for (int i = 0; i < n; i++) {
       board[i] = s;
     }
     vector < int > leftrow(n, 0), upperDiagonal(2 * n - 1, 0), lowerDiagonal(2 * n - 1, 0);
     solve(0, board, ans, leftrow, upperDiagonal, lowerDiagonal, n);
     return ans;
   }

// previous

class Solution {        // Referred Striver's Video
public:
    bool isValid(int row,int col,vector<string> board,int n)
    {
        //Upper Diagonal
        int duprow=row;
        int dupcol=col;
        
        // Basically it only checks left side 135° , 180° and 225°       i.e. mirror 45°,90° and 315°  
        while(col>=0 && row>=0)
        {
            if(board[row][col] == 'Q')
            {
                return false;
            }
            
            row--;
            col--;
        }
        
        col=dupcol;
        row=duprow;
        
        while(col>=0)
        {
            if(board[row][col] == 'Q')
            {
                return false;
            }
            col--;
        }
        
        row=duprow;
        col=dupcol;
        
        while(row<n && col>=0)
        {
            if(board[row][col] == 'Q')
            {
                return false;
            }
            row++;
            col--;
        }
        
        return true;
    }
    
public:
    void solve(int col,vector<string> &board,vector<vector<string>> &ans,int n)
    {
        if(col==n)
        {
            ans.push_back(board);
            return;
        }
        
        for(int row=0;row<n;row++)
        {
            if(isValid(row,col,board,n))
            {
                board[row][col]='Q';
                solve(col+1,board,ans,n);
                board[row][col]='.';
            }
        }
    }
    
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        
        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }
        
        solve(0,board,ans,n);
        
        return ans;
    }
};
