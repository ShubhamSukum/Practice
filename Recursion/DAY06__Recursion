// Leetcode first.. and after this code there is a gfg Subset sum problem Line No. 61
78. Subsets
Medium

Given an integer array nums of unique elements, return all possible 
subsets(the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
Accepted
1.3M
Submissions
1.8M
Acceptance Rate
74.2%

ANSWER =>

class Solution {
public:
    void sub(int i,int n,vector<vector<int>>& ds,vector<int>& result,vector<int>& v1)
    {
        if(i==n)
        {
            ds.push_back(result);
            return;
        }
        
        // TAKE 
        result.push_back(v1[i]);
        sub(i+1,n,ds,result,v1);
        result.pop_back();

        // NOT TAKE
        sub(i+1,n,ds,result,v1);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> ds;
        vector<int> result;
        sub(0,n,ds,result,nums);
        return ds;
    }
};

// gfg

Subset Sums

Given a list arr of N integers, print sums of all subsets in it.

Example 1:

Input:
N = 2
arr[] = {2, 3}
Output:
0 2 3 5
Explanation:
When no elements is taken then Sum = 0.
When only 2 is taken then Sum = 2.
When only 3 is taken then Sum = 3.
When element 2 and 3 are taken then 
Sum = 2+3 = 5.
Example 2:

Input:
N = 3
arr = {5, 2, 1}
Output:
0 1 2 3 5 6 7 8
Your Task:  
You don't need to read input or print anything. Your task is to complete the function subsetSums() which takes a list/vector and an integer N as an input parameter and return the list/vector of all the subset sums.

Expected Time Complexity: O(2 raise to N)
Expected Auxiliary Space: O(2 raise to N)

Constraints:
1 <= N <= 15
0 <= arr[i] <= 104

ANSWER=>

class Solution
{
public:
    
    void Sumset(int ind,int sum,vector<int>& arr,int N,vector<int>& ans)
    {
        if(ind==N)
        {
            ans.push_back(sum);
            return;
        }
        
        // picked
        Sumset(ind+1,sum+arr[ind],arr,N,ans);
        
        // Not picked
        Sumset(ind+1,sum,arr,N,ans);
    }
    
    vector<int> subsetSums(vector<int> arr, int N)
    {
        vector<int> ans;
        Sumset(0,0,arr,N,ans);
        sort(ans.begin(),ans.end());
        return ans;
    }
};
