78. Subsets
Medium

Given an integer array nums of unique elements, return all possible 
subsets(the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
Accepted
1.3M
Submissions
1.8M
Acceptance Rate
74.2%

ANSWER =>

class Solution {
public:
    void sub(int i,int n,vector<vector<int>>& ds,vector<int>& result,vector<int>& v1)
    {
        if(i==n)
        {
            ds.push_back(result);
            return;
        }
        
        // TAKE 
        result.push_back(v1[i]);
        sub(i+1,n,ds,result,v1);
        result.pop_back();

        // NOT TAKE
        sub(i+1,n,ds,result,v1);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> ds;
        vector<int> result;
        sub(0,n,ds,result,nums);
        return ds;
    }
};
