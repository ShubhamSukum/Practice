40. Combination Sum II
Medium
7.5K
183
Companies
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30
Accepted
681.6K
Submissions
1.3M
Acceptance Rate
53.3%

ANSWER =>

// i ani ind recursion call madhe f zala
class Solution {

    void combo(int ind,int target,vector<int>& arr,vector<vector<int>>& ans,vector<int>& ds)
    {
        if(target==0)
        {
            ans.push_back(ds);
            return;
        }

        for(int i=ind;i<arr.size();i++)
        {   
            // If you are not picking the same element for first then continue 
            if(i>ind && arr[i]==arr[i-1]) continue; // why i>ind explanation=> https://youtu.be/G1fRTGRxXU8 30:00

            if(arr[i]>target) break;    // if it exceeds target

            ds.push_back(arr[i]);
            combo(i+1,target-arr[i],arr,ans,ds);
            ds.pop_back();
        } 
    }

public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;    // combination of all possible answers
        vector<int> ds;             // holds the recursion output result to check whether subsequence is possible.

        combo(0,target,candidates,ans,ds);
        return ans;
    }
};
