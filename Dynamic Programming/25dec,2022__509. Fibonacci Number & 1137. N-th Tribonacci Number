509. Fibonacci Number (below 1137. N-th Tribonacci Number)
Easy

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 
Constraints:

0 <= n <= 30
Accepted
1.2M
Submissions
1.7M
Acceptance Rate
69.3%

ANSWER =>
https://leetcode.com/problems/fibonacci-number/solutions/218301/c-4-solutions-explained-recursive-iterative-with-dp-imperative-binet-s/?orderBy=most_votes

// formula approach
O(1) for both space and time.

 int fib(int N) 
 {
      double phi = (sqrt(5) + 1) / 2;     
      return round(pow(phi, N) / sqrt(5));
 }

// Imperative Approach (dp)

class Solution {
public:
    int fib(int n) {
        if(n<2) return n;

        int a=0,b=1,c=0;

        for(int i=1;i<n;i++)
        {
            c=a+b;
            a=b;
            b=c;
        }

        return c;
    }
};

// memoization
class Solution {
public:
    int fib(int n) {
        if(n<2) return n;

        int memo[n+1];
        memo[0]=0,memo[1]=1;
        
        for(int i=2;i<=n;i++)
        {
            memo[i]=memo[i-1]+memo[i-2];
        }

        return memo[n];
    }
};

// Simple recursion

class Solution {
public:
    int fib(int n) {
        if(n==0) return 0;
        if(n==1 || n==2) return 1;
        return fib(n-1)+fib(n-2);
    }
};

-------------------------------------------------------------------------------------------------------------------------------------------------------

1137. N-th Tribonacci Number
Easy

The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.

Example 1:

Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4
Example 2:

Input: n = 25
Output: 1389537

Constraints:

0 <= n <= 37
The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.
Accepted
373.3K
Submissions
590.1K
Acceptance Rate
63.3%

ANSWER =>

// Imperative bottom up DP approach

class Solution {
public:
    int tribonacci(int n) {
        if(n<2) return n;
        if(n==2) return 1;
        int a=0,b=1,c=1,d=0;

        for(int i=2;i<n;i++)
        {
            d=a+b+c;
            a=b;
            b=c;
            c=d;
        }

        return d;
    }
};
